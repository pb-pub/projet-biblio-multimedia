name: Build Executables

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        include:
          - os: ubuntu-22.04
            artifact_name: biblio-linux
            executable_extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev
        sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev
        sudo apt-get install -y libasound2-dev libpulse-dev

    - name: Configure CMake
      run: |
        cd biblio
        cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd biblio
        cmake --build build --config Release

    - name: Prepare Release Payload
      run: |
        mkdir -p release_payload
        cp biblio/build/biblio release_payload/biblio
        # Assuming 'assets' is in 'biblio/assets' relative to the project root
        cp -r biblio/assets release_payload/assets

    - name: Upload Release Payload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-artefacts
        path: release_payload/

  release:
    if: github.event_name == 'release'
    needs: build # Add dependency on the build job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      id: install_qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev
        sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev
        sudo apt-get install -y libasound2-dev libpulse-dev
        sudo apt-get install -y libfuse2 # Add libfuse2 for AppImage support
        # Install linuxdeployqt to workspace root
        wget -O linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: release-artefacts
        path: release-artefacts # Download into a subdirectory named 'release-artefacts'
        # This will download content to ${{ github.workspace }}/release-artefacts

    - name: Package Application
      env:
        QT_BIN_DIR: ${{ steps.install_qt.outputs.binPath }}
      run: |
        # Current directory: ${{ github.workspace }}
        # Artifacts are in './release-artefacts/' (e.g. './release-artefacts/biblio', './release-artefacts/assets/')
        
        mkdir -p app_package/biblio # Create a directory for packaging
        cp release-artefacts/biblio app_package/biblio/
        cp -r release-artefacts/assets app_package/biblio/
        
        # linuxdeployqt is at the workspace root (./linuxdeployqt)
        # Target application is now at app_package/biblio/biblio
        ./linuxdeployqt app_package/biblio/biblio -qmake="$QT_BIN_DIR/qmake" -bundle-non-qt-libs -no-translations -no-copy-copyright-files
        
        # Create launcher script inside app_package/biblio/
        echo '#!/bin/bash' > app_package/biblio/run.sh
        echo 'SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)' >> app_package/biblio/run.sh
        echo 'cd "$SCRIPT_DIR"' >> app_package/biblio/run.sh
        echo 'export LD_LIBRARY_PATH="./lib:$LD_LIBRARY_PATH"' >> app_package/biblio/run.sh
        echo './biblio' >> app_package/biblio/run.sh
        chmod +x app_package/biblio/run.sh
        
        # Create tarball in the workspace root from the contents of app_package/
        tar -czf biblio-linux.tar.gz -C app_package .

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          biblio-linux.tar.gz # Updated path: tarball is now in the workspace root
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
