name: Build Executables

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]
        include:
          - os: ubuntu-22.04
            artifact_name: biblio-linux
            executable_extension: ""
          - os: windows-2022
            artifact_name: biblio-windows
            executable_extension: ".exe"
          - os: macos-13
            artifact_name: biblio-macos
            executable_extension: ".app"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y qt6-base-dev qt6-multimedia-dev qt6-opengl-dev libqt6openglwidgets6-dev
        sudo apt-get install -y libopencv-dev
        sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev
        sudo apt-get install -y libasound2-dev libpulse-dev

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-2022'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtmultimedia qtopengl'

    - name: Install OpenCV (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        vcpkg install opencv[core,imgproc,objdetect]:x64-windows
        echo "CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
      shell: bash

    - name: Install Qt (macOS)
      if: matrix.os == 'macos-13'
      run: |
        brew install qt@6
        brew install opencv
        echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@6)" >> $GITHUB_ENV

    - name: Configure CMake (Ubuntu/macOS)
      if: matrix.os != 'windows-2022'
      run: |
        cd biblio
        cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        cd biblio
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      shell: bash

    - name: Build
      run: |
        cd biblio
        cmake --build build --config Release

    - name: Package Application (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        cd biblio/build
        mkdir -p package/biblio
        cp biblio package/biblio/
        cp -r assets package/biblio/
        # Create launcher script
        echo '#!/bin/bash' > package/biblio/run.sh
        echo 'cd "$(dirname "$0")"' >> package/biblio/run.sh
        echo './biblio' >> package/biblio/run.sh
        chmod +x package/biblio/run.sh
        tar -czf ../biblio-linux.tar.gz -C package .

    - name: Package Application (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        cd biblio/build
        mkdir package
        cp Release/biblio.exe package/
        cp -r assets package/
        # Deploy Qt dependencies
        windeployqt package/biblio.exe --qmldir ../
        # Create zip
        7z a ../biblio-windows.zip ./package/*
      shell: bash

    - name: Package Application (macOS)
      if: matrix.os == 'macos-13'
      run: |
        cd biblio/build
        # Deploy Qt dependencies to app bundle
        macdeployqt biblio.app -dmg
        mv biblio.dmg ../biblio-macos.dmg

    - name: Upload Artifacts (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: biblio/biblio-linux.tar.gz

    - name: Upload Artifacts (Windows)
      if: matrix.os == 'windows-2022'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: biblio/biblio-windows.zip

    - name: Upload Artifacts (macOS)
      if: matrix.os == 'macos-13'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: biblio/biblio-macos.dmg

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/biblio-linux/biblio-linux.tar.gz
          artifacts/biblio-windows/biblio-windows.zip
          artifacts/biblio-macos/biblio-macos.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
